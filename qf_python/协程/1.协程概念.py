# 协程： 微线程，一种用户态的轻量级线程

# 发展历程：
#   1. 最初的生成器变形 yield / send
#   2. 引入@asyncio.corutine 和 yield from
#   3. python3.5版本中引入 async/await 关键字

# 理解协程：
#  1. 普通理解：线程是系统级别的，由操作系统调度。协程是用户级别的，由用户按需调度。
#               我们将线程中的函数看作一个个子程序，协程可以让子程序A中断，执行子程序B, 再让子程序B中断，接着执行A
#  2、专业理解：协程拥有自己的寄存器上下文和栈， 在调度切换时，将寄存器上下文和栈保存到其他地方，
#               切回来时，恢复先前保存的寄存器上下文和栈。因此协程能保留上次调用的状态。

# 协程的优点
# 1. 无须线程上下文切换的开销，避免了无意义的调度，提高了性能，开发者自己承担调度责任，同时协程也失去了使用多CPU的能力
# 2. 无需原子操作锁定及同步的开销  （线程需要上锁）
# 3. 方便切换控制流，简化编程模型
# 4. 高并发 + 高扩展性 + 低成本， 一个CPU支持上万个协程

# 缺点
# 1. 无法利用多核资源，需要和进程配合 （一般CPU密集型应用时候，用多进程 + 协程）
# 2. 进行阻塞操作（耗时IO）, 会阻塞整个程序
